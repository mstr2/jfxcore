/*
 * Copyright (c) 2022, JFXcore. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  JFXcore designates this
 * particular file as subject to the "Classpath" exception as provided
 * in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package javafx.validation;

import javafx.util.Incubating;

/**
 * Defines the basic set of methods to query and observe the validation state of a constrained value.
 *
 * @param <T> value type
 * @param <D> diagnostic type
 *
 * @since JFXcore 18
 */
@Incubating
public interface ConstrainedValue<T, D> {

    /**
     * Adds a {@link ValidationListener} which will be notified when the validation
     * state of this {@code ConstrainedValue} changes.
     * <p>
     * If the same listener is added more than once, then it will be notified more than once.
     * <p>
     * Note that the same {@code ValidationListener} instance may be safely registered for
     * different {@code ConstrainedValue} instances.
     * <p>
     * The {@code ConstrainedValue} stores a strong reference to the listener, which will prevent
     * the listener from being garbage-collected and may result in a memory leak. It is recommended
     * to either unregister a listener by calling {@link #removeListener(ValidationListener) removeListener}
     * after use or to use an instance of {@link WeakValidationListener} avoid this situation.
     */
    void addListener(ValidationListener<? super T, D> listener);

    /**
     * Removes a {@link ValidationListener}.
     *
     * If the listener has not been previously registered (i.e. it was never added), then this method
     * call is a no-op. If it has been previously added, it will be removed. If it has been added more
     * than once, only the first occurrence will be removed.
     */
    void removeListener(ValidationListener<? super T, D> listener);

    /**
     * Gets the value of the {@code ConstrainedValue}.
     */
    T getValue();

    /**
     * Contains a list of validation diagnostics.
     * <p>
     * Constraint {@link Validator validators} may generate a diagnostic as part of the returned
     * {@link ValidationResult}. Diagnostics are application-specified data objects that can be used to
     * provide contextual information for the validated value.
     * <p>
     * All diagnostics that were generated by constraint validators during a validation run are surfaced
     * in this list. Since diagnostics are optional and can be generated regardless of whether the value
     * is valid or invalid, the presence or absence of diagnostics does not necessarily imply that the
     * validated value is either valid or invalid.
     * <p>
     * Diagnostics in this list are not retained across subsequent validation runs: when a constraint
     * is re-evaluated, the diagnostic that was generated in the previous validation run is removed.
     * This means that the diagnostic list will never contain multiple diagnostics from a single
     * constraint validator.
     * <p>
     * For ease of use, the returned diagnostics list provides two sublist views:
     * <ul>
     *     <li>{@link DiagnosticList#validSubList()}, which only includes diagnostics of constraint
     *         validators that successfully validated the value
     *     <li>{@link DiagnosticList#invalidSubList()}, which only includes diagnostics of constraint
     *         validators that failed to validate the value
     * </ul>
     */
    DiagnosticList<D> getDiagnostics();

    /**
     * Indicates whether the value is currently known to be valid.
     * <p>
     * The value is valid if all constraint validators have successfully completed.
     */
    boolean isValid();

    /**
     * Indicates whether the value is currently known to be invalid.
     * <p>
     * The value is invalid if at least one constraint has been violated, independently of
     * whether other constraint validators have already completed validation.
     */
    boolean isInvalid();

    /**
     * Indicates whether the value is currently being validated.
     */
    boolean isValidating();

}
